1.Thrift是一个跨语言的服务部署框架，最初由Facebook于2007年开发，2008年进入Apache开源项目。
Thrift通过一个中间语言(IDL, 接口定义语言)来定义RPC的接口和数据类型，然后通过一个编译器
生成不同语言的代码（目前支持C++,Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#,
 Cocoa, Smalltalk和OCaml）,并由生成的代码负责RPC协议层和传输层的实现.
 
2.Thrift实际上是实现了C/S模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），
 从而实现服务端和客户端跨语言的支持。用户在Thirft描述文件中声明自己的服务，
 这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。
 其中protocol（协议层, 定义数据传输格式，可以为二进制或者XML等）和transport
 （传输层，定义数据传输方式，可以为TCP/IP传输，内存共享或者文件共享等）被用作运行时库.
 
3.支持的数据传输格式、数据传输方式和服务模型
（1）支持的传输格式
	TBinaryProtocol – 二进制格式.
	TCompactProtocol – 压缩格式
	TJSONProtocol – JSON格式
	TSimpleJSONProtocol –提供JSON只写协议, 生成的文件很容易通过脚本语言解析。
	TDebugProtocol – 使用易懂的可读的文本格式，以便于debug
（2） 支持的数据传输方式
	TSocket -阻塞式socker
	TFramedTransport – 以frame为单位进行传输，非阻塞式服务中使用。
	TFileTransport – 以文件形式进行传输。
	TMemoryTransport – 将内存用于I/O. java实现时内部实际使用了简单的ByteArrayOutputStream。
	TZlibTransport – 使用zlib进行压缩， 与其他传输方式联合使用。当前无java实现。
（3）支持的服务模型
	TSimpleServer – 简单的单线程服务模型，常用于测试
	TThreadPoolServer – 多线程服务模型，使用标准的阻塞式IO。
	TNonblockingServer – 多线程服务模型，使用非阻塞式IO（需使用TFramedTransport数据传输方式）
4.安装
1、 利用Thrift部署服务
	主要流程：编写服务说明，保存到.thrift文件–》根据需要， 编译.thrift文件，生成相应的语言源代码–》根据实际需要， 编写client端和server端代码。
	（1）.thrift文件编写
	一般将服务放到一个.thrift文件中，服务的编写语法与C语言语法基本一致，在.thrift文件中有主要有以下几个内容：变量声明、数据声明（struct）和服务接口声明（service, 可以继承其他接口）。
	下面分析Thrift的tutorial中带的例子tutorial.thrift
	包含头文件：
	59行：include “shared.thrift”
	–
	指定目标语言：
	65行：namespace cpp tutorial
	–
	定义变量：
	80行：const i32 INT32CONSTANT = 9853
	–
	定义结构体：
	103行：struct Work {
		1: i32 num1 = 0,
		2: i32 num2,
		3: Operation op,
		4: optional string comment,
	}
	—
	定义服务：
	service Calculator extends shared.SharedService {
		void ping(),
		i32 add(1:i32 num1, 2:i32 num2),
		i32 calculate(1:i32 logid, 2:Work w) throws (1:InvalidOperation ouch),
		oneway void zip()
	}
	     要生成C++ 代码：./thrift --gen cpp  tutorial.thrift，结果代码存放在gen-cpp目录下
	     要生成java代码：./thrift --gen java tutorial.thrift，结果代码存放在gen-java目录下  
    在client端，用户自定义CalculatorClient类型的对象（用户在.thrift文件中声明的服务名称是Calculator，
     则生成的中间代码中的主类为CalculatorClient）， 该对象中封装了各种服务，可以直接调用（如client.ping()）, 
     然后thrift会通过封装的rpc调用server端同名的函数。
    在server端，需要实现在.thrift文件中声明的服务中的所有功能，以便处理client发过来的请求。
    
二、Thrift 使用指南
1. 内容概要
本文档比较全面的介绍了thrift语法，代码生成结构和应用经验。本文主要讲述的对象是thrift文件，并未涉及其client和server的编写方法。
本文档大部分内容翻译自文章：“Thrift:The missing Guide“。
2. 语法参考
2.1 Types
	Thrift类型系统包括预定义基本类型，用户自定义结构体，容器类型，异常和服务定义
	(1) 基本类型
	bool：布尔类型(true or value)，占一个字节
	byte：有符号字节
	i16:16位有符号整型
	i32:32位有符号整型
	i64:64位有符号整型
	double：64位浮点数
	string：未知编码或者二进制的字符串
	注意，thrift不支持无符号整型，因为很多目标语言不存在无符号整型（如java）。
	(2) 容器类型
	Thrift容器与类型密切相关，它与当前流行编程语言提供的容器类型相对应，采用java泛型风格表示的。Thrift提供了3种容器类型：
	List<t1>：一系列t1类型的元素组成的有序表，元素可以重复
	Set<t1>：一系列t1类型的元素组成的无序表，元素唯一
	Map<t1,t2>：key/value对（key的类型是t1且key唯一，value类型是t2）。
	容器中的元素类型可以是除了service意外的任何合法thrift类型（包括结构体和异常）。
	(3)  结构体和异常
	Thrift结构体在概念上同C语言结构体类型—-一种将相关属性聚集（封装）在一起的方式。在面向对象语言中，thrift结构体被转换成类。
	异常在语法和功能上类似于结构体，只不过异常使用关键字exception而不是struct关键字声明。但它在语义上不同于结构体—当定义一个RPC服务时，开发者可能需要声明一个远程方法抛出一个异常。
	结构体和异常的声明将在下一节介绍。
	(4)  服务
	服务的定义方法在语法上等同于面向对象语言中定义接口。Thrift编译器会产生实现这些接口的client和server桩。具体参见下一节。
	(5)  类型定义
	Thrift支持C/C++风格的typedef:
	typedef i32 MyInteger   \\a
	typedef Tweet ReTweet  \\b
	说明：
	a.  末尾没有逗号
	b.   struct可以使用typedef
2.2   枚举类型
	可以像C/C++那样定义枚举类型，如：
	enum TweetType {
		TWEET,       //a
		RETWEET = 2, //b
		DM = 0xa,  //c
		REPLY //d
	}        
	struct Tweet {
		1: required i32 userId;
		2: required string userName;
		3: required string text;
		4: optional Location loc;
		5: optional TweetType tweetType = TweetType.TWEET // e
		16: optional string language = "english"
	}
	说明：
	a.  编译器默认从0开始赋值
	b.  可以赋予某个常量某个整数
	c.  允许常量是十六进制整数
	d.  末尾没有逗号
	e.  给常量赋缺省值时，使用常量的全称
	注意，不同于protocol buffer，thrift不支持枚举类嵌套，枚举常量必须是32位的正整数
2.3   注释
	Thrfit支持shell注释风格，C/C++语言中单行或者多行注释风格
	# This is a valid comment.
	// C++/Java style single-line comments work just as well.
2.4   命名空间
	Thrift中的命名空间同C++中的namespace和java中的package类似，它们均提供了一种组织（隔离）代码的方式。因为每种语言均有自己的命名空间定义方式（如python中有module），thrift允许开发者针对特定语言定义namespace：
	namespace cpp com.example.project  // a
	namespace java com.example.project // b
	说明：
	a．  转化成namespace com { namespace example { namespace project {
	b．  转换成package com.example.project
2.5   文件包含
	Thrift允许thrift文件包含，用户需要使用thrift文件名作为前缀访问被包含的对象，如：
	include "tweet.thrift" // a
	...
	struct TweetSearchResult {
		1: list<tweet.Tweet> tweets; // b
	}
	说明：
	a．  thrift文件名要用双引号包含，末尾没有逗号或者分号
	b．  注意tweet前缀
2.6   常量
	Thrift允许用户定义常量，复杂的类型和结构体可使用JSON形式表示。
	const i32 INT_CONST = 1234;    // a
	const map<string,string> MAP_CONST = {"hello": "world", "goodnight": "moon"}
	说明：
	a．  分号是可选的，可有可无；支持十六进制赋值。
2.7   定义结构体
	结构体由一系列域组成，每个域有唯一整数标识符，类型，名字和可选的缺省参数组成。如：
	struct Tweet {
		1: required i32 userId;                  // a
		2: required string userName;             // b
		3: required string text;
		4: optional Location loc;                // c
		16: optional string language = "english" // d
	}
	struct Location {                            // e
		1: required double latitude;
		2: required double longitude;
	}
	说明：
	a.  每个域有一个唯一的，正整数标识符
	b.  每个域可以标识为required或者optional（也可以不注明）
	c.  结构体可以包含其他结构体
	d.  域可以有缺省值
	e.  一个thrift中可定义多个结构体，并存在引用关系
	规范的struct定义中的每个域均会使用required或者optional关键字进行标识。如果required标识的域没有赋值，thrift将给予提示。如果optional标识的域没有赋值，该域将不会被序列化传输。如果某个optional标识域有缺省值而用户没有重新赋值，则该域的值一直为缺省值。
	与service不同，结构体不支持继承，即，一个结构体不能继承另一个结构体。
2.8   定义服务
	在流行的序列化/反序列化框架（如protocol buffer）中，thrift是少有的提供多语言间RPC服务的框架。
	Thrift编译器会根据选择的目标语言为server产生服务接口代码，为client产生桩代码。
	//“Twitter”与“{”之间需要有空格！！！
	service Twitter {
		// 方法定义方式类似于C语言中的方式，它有一个返回值，一系列参数和可选的异常
		// 列表. 注意，参数列表和异常列表定义方式与结构体中域定义方式一致.
		void ping(),                                    // a
		bool postTweet(1:Tweet tweet);                  // b
		TweetSearchResult searchTweets(1:string query); // c
		// ”oneway”标识符表示client发出请求后不必等待回复（非阻塞）直接进行下面的操作，
		// ”oneway”方法的返回值必须是void
		oneway void zip()                               // d
	}